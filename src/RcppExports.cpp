// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "flexPhyloHMM_types.h"
#include <Rcpp.h>

using namespace Rcpp;

// absorbingStateLogProb
NumericVector absorbingStateLogProb(NumericMatrix& conditionalEmisLogProb, NumericVector& dataLogProb, NumericVector& enumLogProb, double absorbLogProb);
RcppExport SEXP _flexPhyloHMM_absorbingStateLogProb(SEXP conditionalEmisLogProbSEXP, SEXP dataLogProbSEXP, SEXP enumLogProbSEXP, SEXP absorbLogProbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type conditionalEmisLogProb(conditionalEmisLogProbSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type dataLogProb(dataLogProbSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type enumLogProb(enumLogProbSEXP);
    Rcpp::traits::input_parameter< double >::type absorbLogProb(absorbLogProbSEXP);
    rcpp_result_gen = Rcpp::wrap(absorbingStateLogProb(conditionalEmisLogProb, dataLogProb, enumLogProb, absorbLogProb));
    return rcpp_result_gen;
END_RCPP
}
// computeLeafProb
NumericMatrix computeLeafProb(NumMatList& data, NumMatList& scaleFactors, NumMatList& deletionRanges, NumMatList muBack, NumMatList mixPeak, NumVecList weights, NumVecList sampleNormFactor, NumericVector dispParams);
RcppExport SEXP _flexPhyloHMM_computeLeafProb(SEXP dataSEXP, SEXP scaleFactorsSEXP, SEXP deletionRangesSEXP, SEXP muBackSEXP, SEXP mixPeakSEXP, SEXP weightsSEXP, SEXP sampleNormFactorSEXP, SEXP dispParamsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumMatList& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumMatList& >::type scaleFactors(scaleFactorsSEXP);
    Rcpp::traits::input_parameter< NumMatList& >::type deletionRanges(deletionRangesSEXP);
    Rcpp::traits::input_parameter< NumMatList >::type muBack(muBackSEXP);
    Rcpp::traits::input_parameter< NumMatList >::type mixPeak(mixPeakSEXP);
    Rcpp::traits::input_parameter< NumVecList >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< NumVecList >::type sampleNormFactor(sampleNormFactorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dispParams(dispParamsSEXP);
    rcpp_result_gen = Rcpp::wrap(computeLeafProb(data, scaleFactors, deletionRanges, muBack, mixPeak, weights, sampleNormFactor, dispParams));
    return rcpp_result_gen;
END_RCPP
}
// logSumExp
double logSumExp(NumericVector x);
RcppExport SEXP _flexPhyloHMM_logSumExp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(logSumExp(x));
    return rcpp_result_gen;
END_RCPP
}
// logMinusExp
double logMinusExp(double a, NumericVector x);
RcppExport SEXP _flexPhyloHMM_logMinusExp(SEXP aSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(logMinusExp(a, x));
    return rcpp_result_gen;
END_RCPP
}
// updateNBEmisProbCpp
NumericMatrix updateNBEmisProbCpp(NumericMatrix& data, NumericVector& scaleFactors, int& nstates, NumericMatrix& muBack, NumericMatrix& muPeak, NumericMatrix& size);
RcppExport SEXP _flexPhyloHMM_updateNBEmisProbCpp(SEXP dataSEXP, SEXP scaleFactorsSEXP, SEXP nstatesSEXP, SEXP muBackSEXP, SEXP muPeakSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type scaleFactors(scaleFactorsSEXP);
    Rcpp::traits::input_parameter< int& >::type nstates(nstatesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type muBack(muBackSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type muPeak(muPeakSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(updateNBEmisProbCpp(data, scaleFactors, nstates, muBack, muPeak, size));
    return rcpp_result_gen;
END_RCPP
}
// updateNBEmisProbDTCpp
NumericMatrix updateNBEmisProbDTCpp(NumericMatrix& data, NumericVector& scaleFactors, int& nstates, NumericMatrix& muBack, NumericMatrix& muPeak, NumericVector& dispPar);
RcppExport SEXP _flexPhyloHMM_updateNBEmisProbDTCpp(SEXP dataSEXP, SEXP scaleFactorsSEXP, SEXP nstatesSEXP, SEXP muBackSEXP, SEXP muPeakSEXP, SEXP dispParSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type scaleFactors(scaleFactorsSEXP);
    Rcpp::traits::input_parameter< int& >::type nstates(nstatesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type muBack(muBackSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type muPeak(muPeakSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type dispPar(dispParSEXP);
    rcpp_result_gen = Rcpp::wrap(updateNBEmisProbDTCpp(data, scaleFactors, nstates, muBack, muPeak, dispPar));
    return rcpp_result_gen;
END_RCPP
}
// updatePeakFlexMixCpp
NumericMatrix updatePeakFlexMixCpp(NumericMatrix& data, NumericVector& scaleFactors, int& nstates, NumericMatrix& muBack, NumericMatrix& mixPeak, NumericVector weights, NumericVector dispPar, NumericVector sampleNormFactor);
RcppExport SEXP _flexPhyloHMM_updatePeakFlexMixCpp(SEXP dataSEXP, SEXP scaleFactorsSEXP, SEXP nstatesSEXP, SEXP muBackSEXP, SEXP mixPeakSEXP, SEXP weightsSEXP, SEXP dispParSEXP, SEXP sampleNormFactorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type scaleFactors(scaleFactorsSEXP);
    Rcpp::traits::input_parameter< int& >::type nstates(nstatesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type muBack(muBackSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type mixPeak(mixPeakSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dispPar(dispParSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sampleNormFactor(sampleNormFactorSEXP);
    rcpp_result_gen = Rcpp::wrap(updatePeakFlexMixCpp(data, scaleFactors, nstates, muBack, mixPeak, weights, dispPar, sampleNormFactor));
    return rcpp_result_gen;
END_RCPP
}
// updateTreeEmisProbCpp
NumericMatrix updateTreeEmisProbCpp(NumMatList& data, NumMatList& scaleFactors, NumericMatrix treeStates, int nstates, NumMatList& mu, NumMatList& size);
RcppExport SEXP _flexPhyloHMM_updateTreeEmisProbCpp(SEXP dataSEXP, SEXP scaleFactorsSEXP, SEXP treeStatesSEXP, SEXP nstatesSEXP, SEXP muSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumMatList& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumMatList& >::type scaleFactors(scaleFactorsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type treeStates(treeStatesSEXP);
    Rcpp::traits::input_parameter< int >::type nstates(nstatesSEXP);
    Rcpp::traits::input_parameter< NumMatList& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumMatList& >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(updateTreeEmisProbCpp(data, scaleFactors, treeStates, nstates, mu, size));
    return rcpp_result_gen;
END_RCPP
}
// updateTreeEmisProbDTCpp
NumericMatrix updateTreeEmisProbDTCpp(NumMatList& data, NumMatList& scaleFactors, NumericMatrix treeStates, int nstates, NumMatList mu, NumericVector dispParams);
RcppExport SEXP _flexPhyloHMM_updateTreeEmisProbDTCpp(SEXP dataSEXP, SEXP scaleFactorsSEXP, SEXP treeStatesSEXP, SEXP nstatesSEXP, SEXP muSEXP, SEXP dispParamsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumMatList& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumMatList& >::type scaleFactors(scaleFactorsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type treeStates(treeStatesSEXP);
    Rcpp::traits::input_parameter< int >::type nstates(nstatesSEXP);
    Rcpp::traits::input_parameter< NumMatList >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dispParams(dispParamsSEXP);
    rcpp_result_gen = Rcpp::wrap(updateTreeEmisProbDTCpp(data, scaleFactors, treeStates, nstates, mu, dispParams));
    return rcpp_result_gen;
END_RCPP
}
// updateTreeEmisProbDTWindowCpp
NumericMatrix updateTreeEmisProbDTWindowCpp(NumMatList& data, NumMatList& scaleFactors, NumericMatrix treeStates, int nstates, NumMatList mu, NumericVector dispParams, int winSize);
RcppExport SEXP _flexPhyloHMM_updateTreeEmisProbDTWindowCpp(SEXP dataSEXP, SEXP scaleFactorsSEXP, SEXP treeStatesSEXP, SEXP nstatesSEXP, SEXP muSEXP, SEXP dispParamsSEXP, SEXP winSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumMatList& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumMatList& >::type scaleFactors(scaleFactorsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type treeStates(treeStatesSEXP);
    Rcpp::traits::input_parameter< int >::type nstates(nstatesSEXP);
    Rcpp::traits::input_parameter< NumMatList >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dispParams(dispParamsSEXP);
    Rcpp::traits::input_parameter< int >::type winSize(winSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(updateTreeEmisProbDTWindowCpp(data, scaleFactors, treeStates, nstates, mu, dispParams, winSize));
    return rcpp_result_gen;
END_RCPP
}
// updateTreeEmisProbGMixCpp
NumericMatrix updateTreeEmisProbGMixCpp(NumMatList& data, NumMatList& scaleFactors, NumericMatrix treeStates, int nstates, NumMatList muBack, NumMatList mixPeak, NumericVector weights, NumericVector dispParams);
RcppExport SEXP _flexPhyloHMM_updateTreeEmisProbGMixCpp(SEXP dataSEXP, SEXP scaleFactorsSEXP, SEXP treeStatesSEXP, SEXP nstatesSEXP, SEXP muBackSEXP, SEXP mixPeakSEXP, SEXP weightsSEXP, SEXP dispParamsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumMatList& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumMatList& >::type scaleFactors(scaleFactorsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type treeStates(treeStatesSEXP);
    Rcpp::traits::input_parameter< int >::type nstates(nstatesSEXP);
    Rcpp::traits::input_parameter< NumMatList >::type muBack(muBackSEXP);
    Rcpp::traits::input_parameter< NumMatList >::type mixPeak(mixPeakSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dispParams(dispParamsSEXP);
    rcpp_result_gen = Rcpp::wrap(updateTreeEmisProbGMixCpp(data, scaleFactors, treeStates, nstates, muBack, mixPeak, weights, dispParams));
    return rcpp_result_gen;
END_RCPP
}
// updateTreeEmisProbFlexMixCpp
NumericMatrix updateTreeEmisProbFlexMixCpp(NumMatList& data, NumMatList& scaleFactors, NumMatList& deletionRanges, NumericMatrix treeStates, int nstates, NumMatList muBack, NumMatList mixPeak, NumVecList weights, NumVecList sampleNormFactor, NumericVector dispParams);
RcppExport SEXP _flexPhyloHMM_updateTreeEmisProbFlexMixCpp(SEXP dataSEXP, SEXP scaleFactorsSEXP, SEXP deletionRangesSEXP, SEXP treeStatesSEXP, SEXP nstatesSEXP, SEXP muBackSEXP, SEXP mixPeakSEXP, SEXP weightsSEXP, SEXP sampleNormFactorSEXP, SEXP dispParamsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumMatList& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumMatList& >::type scaleFactors(scaleFactorsSEXP);
    Rcpp::traits::input_parameter< NumMatList& >::type deletionRanges(deletionRangesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type treeStates(treeStatesSEXP);
    Rcpp::traits::input_parameter< int >::type nstates(nstatesSEXP);
    Rcpp::traits::input_parameter< NumMatList >::type muBack(muBackSEXP);
    Rcpp::traits::input_parameter< NumMatList >::type mixPeak(mixPeakSEXP);
    Rcpp::traits::input_parameter< NumVecList >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< NumVecList >::type sampleNormFactor(sampleNormFactorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dispParams(dispParamsSEXP);
    rcpp_result_gen = Rcpp::wrap(updateTreeEmisProbFlexMixCpp(data, scaleFactors, deletionRanges, treeStates, nstates, muBack, mixPeak, weights, sampleNormFactor, dispParams));
    return rcpp_result_gen;
END_RCPP
}
// updateTreeEnumeratedStates
NumericMatrix updateTreeEnumeratedStates(NumericMatrix& leafProbs, NumericMatrix& treeStates, int nstates, int absorbingState);
RcppExport SEXP _flexPhyloHMM_updateTreeEnumeratedStates(SEXP leafProbsSEXP, SEXP treeStatesSEXP, SEXP nstatesSEXP, SEXP absorbingStateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type leafProbs(leafProbsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type treeStates(treeStatesSEXP);
    Rcpp::traits::input_parameter< int >::type nstates(nstatesSEXP);
    Rcpp::traits::input_parameter< int >::type absorbingState(absorbingStateSEXP);
    rcpp_result_gen = Rcpp::wrap(updateTreeEnumeratedStates(leafProbs, treeStates, nstates, absorbingState));
    return rcpp_result_gen;
END_RCPP
}
// treeLL
NumericVector treeLL(const NumericMatrix& leafProb, const NumericMatrix& qConcat, const NumericMatrix& traversal, const NumericVector& tips, const NumericVector& logBaseFreq);
RcppExport SEXP _flexPhyloHMM_treeLL(SEXP leafProbSEXP, SEXP qConcatSEXP, SEXP traversalSEXP, SEXP tipsSEXP, SEXP logBaseFreqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type leafProb(leafProbSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type qConcat(qConcatSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type traversal(traversalSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tips(tipsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type logBaseFreq(logBaseFreqSEXP);
    rcpp_result_gen = Rcpp::wrap(treeLL(leafProb, qConcat, traversal, tips, logBaseFreq));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_flexPhyloHMM_absorbingStateLogProb", (DL_FUNC) &_flexPhyloHMM_absorbingStateLogProb, 4},
    {"_flexPhyloHMM_computeLeafProb", (DL_FUNC) &_flexPhyloHMM_computeLeafProb, 8},
    {"_flexPhyloHMM_logSumExp", (DL_FUNC) &_flexPhyloHMM_logSumExp, 1},
    {"_flexPhyloHMM_logMinusExp", (DL_FUNC) &_flexPhyloHMM_logMinusExp, 2},
    {"_flexPhyloHMM_updateNBEmisProbCpp", (DL_FUNC) &_flexPhyloHMM_updateNBEmisProbCpp, 6},
    {"_flexPhyloHMM_updateNBEmisProbDTCpp", (DL_FUNC) &_flexPhyloHMM_updateNBEmisProbDTCpp, 6},
    {"_flexPhyloHMM_updatePeakFlexMixCpp", (DL_FUNC) &_flexPhyloHMM_updatePeakFlexMixCpp, 8},
    {"_flexPhyloHMM_updateTreeEmisProbCpp", (DL_FUNC) &_flexPhyloHMM_updateTreeEmisProbCpp, 6},
    {"_flexPhyloHMM_updateTreeEmisProbDTCpp", (DL_FUNC) &_flexPhyloHMM_updateTreeEmisProbDTCpp, 6},
    {"_flexPhyloHMM_updateTreeEmisProbDTWindowCpp", (DL_FUNC) &_flexPhyloHMM_updateTreeEmisProbDTWindowCpp, 7},
    {"_flexPhyloHMM_updateTreeEmisProbGMixCpp", (DL_FUNC) &_flexPhyloHMM_updateTreeEmisProbGMixCpp, 8},
    {"_flexPhyloHMM_updateTreeEmisProbFlexMixCpp", (DL_FUNC) &_flexPhyloHMM_updateTreeEmisProbFlexMixCpp, 10},
    {"_flexPhyloHMM_updateTreeEnumeratedStates", (DL_FUNC) &_flexPhyloHMM_updateTreeEnumeratedStates, 4},
    {"_flexPhyloHMM_treeLL", (DL_FUNC) &_flexPhyloHMM_treeLL, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_flexPhyloHMM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
